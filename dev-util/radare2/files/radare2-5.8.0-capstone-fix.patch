diff --git a/libr/anal/p/anal_arm_cs.c b/libr/anal/p/anal_arm_cs.c
index fb25ad6e74..681c39cc93 100644
--- a/libr/anal/p/anal_arm_cs.c
+++ b/libr/anal/p/anal_arm_cs.c
@@ -1320,9 +1320,6 @@ static int analop64_esil(RAnal *a, RAnalOp *op, ut64 addr, const ut8 *buf, int l
 		r_strbuf_setf (&op->esil, "%s,%s,*,0,-,%s,=",
 			REG64 (2), REG64 (1), REG64 (0));
 		break;
-#if CS_API_MAJOR > 4
-	case ARM64_INS_ADDG:
-#endif
 	case ARM64_INS_ADD:
 	case ARM64_INS_ADC: // Add with carry.
 		OPCALL ("+");
@@ -3307,9 +3304,6 @@ static void anop64(csh handle, RAnalOp *op, cs_insn *insn) {
 
 	switch (insn->id) {
 #if CS_API_MAJOR > 4
-	case ARM64_INS_UDF:
-		op->type = R_ANAL_OP_TYPE_ILL;
-		break;
 	case ARM64_INS_PACDA:
 	case ARM64_INS_PACDB:
 	case ARM64_INS_PACDZA:
@@ -3394,9 +3388,6 @@ static void anop64(csh handle, RAnalOp *op, cs_insn *insn) {
 		op->cycles = 4;
 		op->type = R_ANAL_OP_TYPE_MUL;
 		break;
-#if CS_API_MAJOR > 4
-	case ARM64_INS_ADDG:
-#endif
 	case ARM64_INS_ADD:
 		if (ISREG64 (0) && REGID64 (0) == ARM64_REG_SP) {
 			op->stackop = R_ANAL_STACK_INC;
@@ -3408,7 +3399,7 @@ static void anop64(csh handle, RAnalOp *op, cs_insn *insn) {
 				op->stackptr = -IMM64 (2);
 			}
 			op->val = op->stackptr;
-		} else if (REGID64 (0) == ARM64_REG_SP) {
+		} else {
 			op->stackop = R_ANAL_STACK_RESET;
 			op->stackptr = 0;
 		}
@@ -3640,10 +3631,6 @@ static void anop64(csh handle, RAnalOp *op, cs_insn *insn) {
 		}
 		break;
 #if CS_API_MAJOR > 4
-	case ARM64_INS_IRG:
-		op->family = R_ANAL_OP_FAMILY_SECURITY;
-		op->type = R_ANAL_OP_TYPE_MOV;
-		break;
 	case ARM64_INS_BLRAA:
 	case ARM64_INS_BLRAAZ:
 	case ARM64_INS_BLRAB:
@@ -4457,10 +4444,6 @@ static void op_fillval(RAnal *anal, RAnalOp *op, csh handle, cs_insn *insn, int
 	}
 }
 
-static inline bool is_valid_mnemonic(const char *m) {
-	return !r_str_startswith (m, "hint") && !r_str_startswith (m, "udf");
-}
-
 static void initcs(csh ud) {
 	cs_opt_mem mem = {
 		.malloc = malloc,
@@ -4509,9 +4492,11 @@ static int analop(RAnal *a, RAnalOp *op, ut64 addr, const ut8 *buf, int len, RAn
 		}
 		cs_option (a->cs_handle, CS_OPT_DETAIL, CS_OPT_ON);
 	}
+
 	// TODO: use csh handle = init_capstone (a);
 	n = cs_disasm (a->cs_handle, (ut8*)buf, len, addr, 1, &insn);
-	if (n > 0 && is_valid_mnemonic (insn->mnemonic)) {
+	if (n > 0 && !(insn->mnemonic[0] == 'h' && insn->mnemonic[1] == 'i' &&
+		insn->mnemonic[2] == 'n' && insn->mnemonic[3] == 't')) {
 		if (mask & R_ARCH_OP_MASK_DISASM) {
 			free (op->mnemonic);
 			op->mnemonic = r_str_newf ("%s%s%s",
diff --git a/test/db/anal/arm64 b/test/db/anal/arm64
index c3a1fead9f..c64242a999 100644
--- a/test/db/anal/arm64
+++ b/test/db/anal/arm64
@@ -98,7 +98,7 @@ mnemonic: irg
 description: insert random tag
 mask: ffffffff
 prefix: 0
-id: 429
+id: 0
 bytes: e813c89a
 refptr: 0
 size: 4
@@ -108,23 +108,22 @@ cycles: 0
 family: sec
 --
 address: 0x100007f14
-opcode: addg x9, x8, 0x20, 0
+opcode: addg x9, x8, 0x20, 0x0
 esilcost: 0
-disasm: addg x9, x8, 0x20, 0
-pseudo: addg x9, x8, 0x20, 0
+disasm: addg x9, x8, 0x20, 0x0
+pseudo: addg x9,x8,0x20, 0x0
 mnemonic: addg
 description: add with tag
 mask: ffffffff
 prefix: 0
-id: 7
+id: 0
 bytes: 09018291
 refptr: 0
 size: 4
 sign: false
 type: add
-cycles: 1
-esil: 0x20,x8,+,x9,=
-family: cpu
+cycles: 0
+family: sec
 EOF
 RUN
 
@@ -141,42 +140,40 @@ ao@8
 EOF
 EXPECT=<<EOF
 address: 0x0
-opcode: addg x12, x8, 0x200, 2
+opcode: addg x12, x8, 0x0, 0x2
 esilcost: 0
-disasm: addg x12, x8, 0x200, 2
-pseudo: addg x12, x8, 0x200, 2
+disasm: addg x12, x8, 0x0, 0x2
+pseudo: addg x12, x8, 0x0, 0x2
 mnemonic: addg
 description: add with tag
 mask: ffffffff
 prefix: 0
-id: 7
+id: 0
 bytes: 91a0090c
 refptr: 0
 size: 4
 sign: false
 type: add
-cycles: 1
-esil: 0x200,x8,+,x12,=
-family: cpu
+cycles: 0
+family: sec
 ---
 address: 0x4
-opcode: addg x9, x8, 0x20, 0
+opcode: addg x9, x8, 0x20, 0x0
 esilcost: 0
-disasm: addg x9, x8, 0x20, 0
-pseudo: addg x9, x8, 0x20, 0
+disasm: addg x9, x8, 0x20, 0x0
+pseudo: addg x9, x8, 0x20, 0x0
 mnemonic: addg
 description: add with tag
 mask: ffffffff
 prefix: 0
-id: 7
+id: 0
 bytes: 91820109
 refptr: 0
 size: 4
 sign: false
 type: add
-cycles: 1
-esil: 0x20,x8,+,x9,=
-family: cpu
+cycles: 0
+family: sec
 ---
 address: 0x8
 opcode: irg x8, sp, x8
@@ -187,7 +184,7 @@ mnemonic: irg
 description: insert random tag
 mask: ffffffff
 prefix: 0
-id: 429
+id: 0
 bytes: 9ac813e8
 refptr: 0
 size: 4
diff --git a/test/db/cmd/cmd_ao b/test/db/cmd/cmd_ao
index 8a8077570e..b53373d736 100644
--- a/test/db/cmd/cmd_ao
+++ b/test/db/cmd/cmd_ao
@@ -38,7 +38,7 @@ aoml~?
 EOF
 EXPECT=<<EOF
 invalid
-1288
+949
 471
 471
 EOF
diff --git a/test/db/cmd/cmd_search b/test/db/cmd/cmd_search
index a4ce53fb80..23853816d0 100644
--- a/test/db/cmd/cmd_search
+++ b/test/db/cmd/cmd_search
@@ -82,21 +82,10 @@ EXPECT=<<EOF
 0x100011a50             02208072  movk w2, 0x100
 0x100011ac4             02208072  movk w2, 0x100
 0x100011b38             02208072  movk w2, 0x100
-0x100012588             e3031832  mov w3, 0x100
 0x100013704             02208072  movk w2, 0x100
-0x100013c7c             e8031832  mov w8, 0x100
-0x100013d28             e10378b2  mov x1, 0x100
-0x100013db0             e8031832  mov w8, 0x100
-0x100013fe0             e80378b2  mov x8, 0x100
-0x10001413c             e00378b2  mov x0, 0x100
-0x100014670             e9031832  mov w9, 0x100
 0x10006cb40             ff0304d1  sub sp, sp, 0x100
 0x100072594             04208072  movk w4, 0x100
 0x10007856c             ff0304d1  sub sp, sp, 0x100
-0x100086a3c             e3031832  mov w3, 0x100
-0x100086ae0             e3031832  mov w3, 0x100
-0x100086b20             e3031832  mov w3, 0x100
-0x100086b5c             e3031832  mov w3, 0x100
 0x10009b4e8             ff0304d1  sub sp, sp, 0x100
 0x1000bfc00             04208072  movk w4, 0x100
 0x1000f24d0             ff0304d1  sub sp, sp, 0x100
