From e32c2a5ab30dc84bc195eb216e01717cd97cc584 Mon Sep 17 00:00:00 2001
From: Triton Library <tritonlibrary@gmail.com>
Date: Mon, 20 May 2024 21:46:11 +0200
Subject: [PATCH] Fix #1317: Support Python 3.12

--- a/src/libtriton/bindings/python/utils.cpp
+++ b/src/libtriton/bindings/python/utils.cpp
@@ -14,6 +14,29 @@
 #include <limits>
 
 
+#if PY_VERSION_HEX >= 0x030C0000
+
+  #define tt_GET_OB_DIGIT(obj) obj->long_value.ob_digit
+  #define tt_SET_OB_DIGIT(obj, n) obj->long_value.lv_tag = (n << 3) | (obj->long_value.lv_tag & 3)
+  #define tt_PyLong_IsNegative(obj) ((obj->long_value.lv_tag & 3) == 2)
+  #define tt_PyLong_DigitCount(obj) (obj->long_value.lv_tag >> 3)
+
+#elif PY_VERSION_HEX >= 0X030A00F0
+
+  #define tt_GET_OB_DIGIT(obj) obj->ob_digit
+  #define tt_SET_OB_DIGIT(obj, n) Py_SET_SIZE(obj, n)
+  #define tt_PyLong_IsNegative(obj) (Py_SIZE(obj) < 0)
+  #define tt_PyLong_DigitCount(obj) (_PyLong_IsNegative(obj) ? -Py_SIZE(obj) : Py_SIZE(obj))
+
+#else
+
+  #define tt_GET_OB_DIGIT(obj) obj->ob_digit
+  #define tt_SET_OB_DIGIT(obj, n) Py_SIZE(obj) = n
+  #define tt_PyLong_IsNegative(obj) (Py_SIZE(obj) < 0)
+  #define tt_PyLong_DigitCount(obj) (_PyLong_IsNegative(obj) ? -Py_SIZE(obj) : Py_SIZE(obj))
+
+#endif
+
 
 namespace triton {
   namespace bindings {
@@ -38,13 +61,13 @@ namespace triton {
         }
 
         v = reinterpret_cast<PyLongObject*>(vv);
-        n = (Py_SIZE(v) < 0);
-        i = n ? -Py_SIZE(v) : Py_SIZE(v);
+        n = tt_PyLong_IsNegative(v);
+        i = tt_PyLong_DigitCount(v);
         x = 0;
 
         while (--i >= 0) {
           prev = x;
-          x = (x << PyLong_SHIFT) | v->ob_digit[i];
+          x = (x << PyLong_SHIFT) | tt_GET_OB_DIGIT(v)[i];
           if ((x >> PyLong_SHIFT) != prev)
             throw triton::exceptions::Bindings("triton::bindings::python::PyLong_AsUint(): long int too large to convert.");
         }
@@ -67,13 +90,13 @@ namespace triton {
         }
 
         v = reinterpret_cast<PyLongObject*>(vv);
-        n = (Py_SIZE(v) < 0);
-        i = n ? -Py_SIZE(v) : Py_SIZE(v);
+        n = tt_PyLong_IsNegative(v);
+        i = tt_PyLong_DigitCount(v);
         x = 0;
 
         while (--i >= 0) {
           prev = x;
-          x = (x << PyLong_SHIFT) | v->ob_digit[i];
+          x = (x << PyLong_SHIFT) | tt_GET_OB_DIGIT(v)[i];
           if ((x >> PyLong_SHIFT) != prev)
             throw triton::exceptions::Bindings("triton::bindings::python::PyLong_AsUsize(): long int too large to convert.");
         }
@@ -96,13 +119,13 @@ namespace triton {
         }
 
         v = reinterpret_cast<PyLongObject*>(vv);
-        n = (Py_SIZE(v) < 0);
-        i = n ? -Py_SIZE(v) : Py_SIZE(v);
+        n = tt_PyLong_IsNegative(v);
+        i = tt_PyLong_DigitCount(v);
         x = 0;
 
         while (--i >= 0) {
           prev = x;
-          x = (x << PyLong_SHIFT) | v->ob_digit[i];
+          x = (x << PyLong_SHIFT) | tt_GET_OB_DIGIT(v)[i];
           if ((x >> PyLong_SHIFT) != prev)
             throw triton::exceptions::Bindings("triton::bindings::python::PyLong_AsUint32(): long int too large to convert.");
         }
@@ -125,13 +148,13 @@ namespace triton {
         }
 
         v = reinterpret_cast<PyLongObject*>(vv);
-        n = (Py_SIZE(v) < 0);
-        i = n ? -Py_SIZE(v) : Py_SIZE(v);
+        n = tt_PyLong_IsNegative(v);
+        i = tt_PyLong_DigitCount(v);
         x = 0;
 
         while (--i >= 0) {
           prev = x;
-          x = (x << PyLong_SHIFT) | v->ob_digit[i];
+          x = (x << PyLong_SHIFT) | tt_GET_OB_DIGIT(v)[i];
           if ((x >> PyLong_SHIFT) != prev)
             throw triton::exceptions::Bindings("triton::bindings::python::PyLong_AsUint64(): long int too large to convert.");
         }
@@ -154,13 +177,13 @@ namespace triton {
         }
 
         v = reinterpret_cast<PyLongObject*>(vv);
-        n = (Py_SIZE(v) < 0);
-        i = n ? -Py_SIZE(v) : Py_SIZE(v);
+        n = tt_PyLong_IsNegative(v);
+        i = tt_PyLong_DigitCount(v);
         x = 0;
 
         while (--i >= 0) {
           prev = x;
-          x = (x << PyLong_SHIFT) | v->ob_digit[i];
+          x = (x << PyLong_SHIFT) | tt_GET_OB_DIGIT(v)[i];
           if ((x >> PyLong_SHIFT) != prev)
             throw triton::exceptions::Bindings("triton::bindings::python::PyLong_AsUint128(): long int too large to convert.");
         }
@@ -183,13 +206,13 @@ namespace triton {
         }
 
         v = reinterpret_cast<PyLongObject*>(vv);
-        n = (Py_SIZE(v) < 0);
-        i = n ? -Py_SIZE(v) : Py_SIZE(v);
+        n = tt_PyLong_IsNegative(v);
+        i = tt_PyLong_DigitCount(v);
         x = 0;
 
         while (--i >= 0) {
           prev = x;
-          x = (x << PyLong_SHIFT) | v->ob_digit[i];
+          x = (x << PyLong_SHIFT) | tt_GET_OB_DIGIT(v)[i];
           if ((x >> PyLong_SHIFT) != prev)
             throw triton::exceptions::Bindings("triton::bindings::python::PyLong_AsUint256(): long int too large to convert.");
         }
@@ -212,13 +235,13 @@ namespace triton {
         }
 
         v = reinterpret_cast<PyLongObject*>(vv);
-        n = (Py_SIZE(v) < 0);
-        i = n ? -Py_SIZE(v) : Py_SIZE(v);
+        n = tt_PyLong_IsNegative(v);
+        i = tt_PyLong_DigitCount(v);
         x = 0;
 
         while (--i >= 0) {
           prev = x;
-          x = (x << PyLong_SHIFT) | v->ob_digit[i];
+          x = (x << PyLong_SHIFT) | tt_GET_OB_DIGIT(v)[i];
           if ((x >> PyLong_SHIFT) != prev)
             throw triton::exceptions::Bindings("triton::bindings::python::PyLong_AsUint512(): long int too large to convert.");
         }
@@ -248,12 +271,9 @@ namespace triton {
         }
 
         v = _PyLong_New(ndigits);
-        digit* p = v->ob_digit;
-        #if PY_VERSION_HEX >= 0x030a00f0
-        Py_SET_SIZE(v, ndigits);
-        #else
-        Py_SIZE(v) = ndigits;
-        #endif
+        digit* p = tt_GET_OB_DIGIT(v);
+        tt_SET_OB_DIGIT(v, ndigits);
+
         while (value) {
           *p++ = static_cast<digit>(value & PyLong_MASK);
           value >>= PyLong_SHIFT;
@@ -285,12 +305,9 @@ namespace triton {
         }
 
         v = _PyLong_New(ndigits);
-        digit* p = v->ob_digit;
-        #if PY_VERSION_HEX >= 0x030a00f0
-        Py_SET_SIZE(v, ndigits);
-        #else
-        Py_SIZE(v) = ndigits;
-        #endif
+        digit* p = tt_GET_OB_DIGIT(v);
+        tt_SET_OB_DIGIT(v, ndigits);
+
         while (value) {
           *p++ = static_cast<digit>(value & PyLong_MASK);
           value >>= PyLong_SHIFT;
@@ -325,12 +342,9 @@ namespace triton {
         }
 
         v = _PyLong_New(ndigits);
-        digit* p = v->ob_digit;
-        #if PY_VERSION_HEX >= 0x030a00f0
-        Py_SET_SIZE(v, ndigits);
-        #else
-        Py_SIZE(v) = ndigits;
-        #endif
+        digit* p = tt_GET_OB_DIGIT(v);
+        tt_SET_OB_DIGIT(v, ndigits);
+
         while (value) {
           *p++ = static_cast<digit>(value & PyLong_MASK);
           value >>= PyLong_SHIFT;
@@ -358,12 +372,9 @@ namespace triton {
         }
 
         v = _PyLong_New(ndigits);
-        digit* p = v->ob_digit;
-        #if PY_VERSION_HEX >= 0x030a00f0
-        Py_SET_SIZE(v, ndigits);
-        #else
-        Py_SIZE(v) = ndigits;
-        #endif
+        digit* p = tt_GET_OB_DIGIT(v);
+        tt_SET_OB_DIGIT(v, ndigits);
+
         while (value) {
           *p++ = static_cast<digit>(value & PyLong_MASK);
           value >>= PyLong_SHIFT;
@@ -391,12 +402,9 @@ namespace triton {
         }
 
         v = _PyLong_New(ndigits);
-        digit* p = v->ob_digit;
-        #if PY_VERSION_HEX >= 0x030a00f0
-        Py_SET_SIZE(v, ndigits);
-        #else
-        Py_SIZE(v) = ndigits;
-        #endif
+        digit* p = tt_GET_OB_DIGIT(v);
+        tt_SET_OB_DIGIT(v, ndigits);
+
         while (value) {
           *p++ = static_cast<digit>(value & PyLong_MASK);
           value >>= PyLong_SHIFT;
@@ -424,12 +432,9 @@ namespace triton {
         }
 
         v = _PyLong_New(ndigits);
-        digit* p = v->ob_digit;
-        #if PY_VERSION_HEX >= 0x030a00f0
-        Py_SET_SIZE(v, ndigits);
-        #else
-        Py_SIZE(v) = ndigits;
-        #endif
+        digit* p = tt_GET_OB_DIGIT(v);
+        tt_SET_OB_DIGIT(v, ndigits);
+
         while (value) {
           *p++ = static_cast<digit>(value & PyLong_MASK);
           value >>= PyLong_SHIFT;
@@ -441,3 +446,8 @@ namespace triton {
     }; /* python namespace */
   }; /* bindings namespace */
 }; /* triton namespace */
+
+#undef tt_GET_OB_DIGIT
+#undef tt_SET_OB_DIGIT
+#undef tt_PyLong_IsNegative
+#undef tt_PyLong_DigitCount
From 98de7d897a6feee38082fa91d259928ab125aabe Mon Sep 17 00:00:00 2001
From: Triton Library <tritonlibrary@gmail.com>
Date: Mon, 20 May 2024 21:58:27 +0200
Subject: [PATCH] Fix #1317: Support Python 3.12 (typo)

--- a/src/libtriton/bindings/python/utils.cpp
+++ b/src/libtriton/bindings/python/utils.cpp
@@ -26,14 +26,14 @@
   #define tt_GET_OB_DIGIT(obj) obj->ob_digit
   #define tt_SET_OB_DIGIT(obj, n) Py_SET_SIZE(obj, n)
   #define tt_PyLong_IsNegative(obj) (Py_SIZE(obj) < 0)
-  #define tt_PyLong_DigitCount(obj) (_PyLong_IsNegative(obj) ? -Py_SIZE(obj) : Py_SIZE(obj))
+  #define tt_PyLong_DigitCount(obj) (tt_PyLong_IsNegative(obj) ? -Py_SIZE(obj) : Py_SIZE(obj))
 
 #else
 
   #define tt_GET_OB_DIGIT(obj) obj->ob_digit
   #define tt_SET_OB_DIGIT(obj, n) Py_SIZE(obj) = n
   #define tt_PyLong_IsNegative(obj) (Py_SIZE(obj) < 0)
-  #define tt_PyLong_DigitCount(obj) (_PyLong_IsNegative(obj) ? -Py_SIZE(obj) : Py_SIZE(obj))
+  #define tt_PyLong_DigitCount(obj) (tt_PyLong_IsNegative(obj) ? -Py_SIZE(obj) : Py_SIZE(obj))
 
 #endif
 
