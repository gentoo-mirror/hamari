diff -Naur indi-3rdparty.org/cmake_modules/Findudev.cmake indi-3rdparty/cmake_modules/Findudev.cmake
--- indi-3rdparty.org/cmake_modules/Findudev.cmake	1970-01-01 01:00:00.000000000 +0100
+++ indi-3rdparty/cmake_modules/Findudev.cmake	2021-08-13 07:39:28.584772172 +0200
@@ -0,0 +1,78 @@
+# - try to find the udev library
+#
+# Cache Variables: (probably not for direct use in your scripts)
+#  UDEV_INCLUDE_DIR
+#  UDEV_SOURCE_DIR
+#  UDEV_LIBRARY
+#
+# Non-cache variables you might use in your CMakeLists.txt:
+#  UDEV_FOUND
+#  UDEV_INCLUDE_DIRS
+#  UDEV_LIBRARIES
+#
+# Requires these CMake modules:
+#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)
+#
+# Original Author:
+# Copyright 2014 Kevin M. Godby <kevin@godby.org>
+# SPDX-License-Identifier: BSL-1.0
+#
+# Distributed under the Boost Software License, Version 1.0.
+# (See accompanying file LICENSE_1_0.txt or copy at
+# http://www.boost.org/LICENSE_1_0.txt)
+
+set(UDEV_ROOT_DIR
+    "${UDEV_ROOT_DIR}"
+	CACHE
+	PATH
+    "Directory to search for udev")
+
+find_package(PkgConfig QUIET)
+if(PKG_CONFIG_FOUND)
+	pkg_check_modules(PC_LIBUDEV libudev)
+endif()
+
+find_library(UDEV_LIBRARY
+	NAMES
+	udev
+	PATHS
+	${PC_LIBUDEV_LIBRARY_DIRS}
+	${PC_LIBUDEV_LIBDIR}
+	HINTS
+	"${UDEV_ROOT_DIR}"
+	PATH_SUFFIXES
+	lib
+	)
+
+get_filename_component(_libdir "${UDEV_LIBRARY}" PATH)
+
+find_path(UDEV_INCLUDE_DIR
+	NAMES
+	libudev.h
+	PATHS
+	${PC_LIBUDEV_INCLUDE_DIRS}
+	${PC_LIBUDEV_INCLUDEDIR}
+	HINTS
+	"${_libdir}"
+	"${_libdir}/.."
+	"${UDEV_ROOT_DIR}"
+	PATH_SUFFIXES
+	include
+	)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(udev
+	DEFAULT_MSG
+	UDEV_LIBRARY
+	UDEV_INCLUDE_DIR
+	)
+
+if(UDEV_FOUND)
+	list(APPEND UDEV_LIBRARIES ${UDEV_LIBRARY})
+	list(APPEND UDEV_INCLUDE_DIRS ${UDEV_INCLUDE_DIR})
+	mark_as_advanced(UDEV_ROOT_DIR)
+endif()
+
+mark_as_advanced(UDEV_INCLUDE_DIR
+	UDEV_LIBRARY)
+
diff -Naur indi-3rdparty.org/indi-asi/CMakeLists.txt indi-3rdparty/indi-asi/CMakeLists.txt
--- indi-3rdparty.org/CMakeLists.txt	2021-08-12 07:41:07.888465348 +0200
+++ indi-3rdparty/CMakeLists.txt	2021-08-13 07:27:38.126814325 +0200
@@ -11,6 +11,7 @@
 find_package(ZLIB REQUIRED)
 find_package(USB1 REQUIRED)
 find_package(Threads REQUIRED)
+find_package(udev REQUIRED)
 
 set(ASI_VERSION_MAJOR 1)
 set(ASI_VERSION_MINOR 9)
@@ -23,6 +24,7 @@
 include_directories( ${INDI_INCLUDE_DIR})
 include_directories( ${ASI_INCLUDE_DIR})
 include_directories( ${CFITSIO_INCLUDE_DIR})
+include_directories( ${UDEV_INCLUDE_DIR})
 
 include(CMakeCommon)
 
@@ -40,7 +42,7 @@
    )
 
 add_executable(indi_asi_ccd ${indi_asi_SRCS})
-target_link_libraries(indi_asi_ccd ${INDI_LIBRARIES} ${CFITSIO_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${ZLIB_LIBRARY} ${CMAKE_THREAD_LIBS_INIT})
+target_link_libraries(indi_asi_ccd ${INDI_LIBRARIES} ${CFITSIO_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${ZLIB_LIBRARY} ${CMAKE_THREAD_LIBS_INIT} ${UDEV_LIBRARIES})
 if (HAVE_WEBSOCKET)
     target_link_libraries(indi_asi_ccd ${Boost_LIBRARIES})
 endif()
@@ -49,36 +51,36 @@
 add_executable(indi_asi_wheel ${CMAKE_CURRENT_SOURCE_DIR}/asi_wheel.cpp)
 IF (APPLE)
 set(CMAKE_EXE_LINKER_FLAGS "-framework IOKit -framework CoreFoundation")
-target_link_libraries(indi_asi_wheel ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES})
+target_link_libraries(indi_asi_wheel ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES} ${UDEV_LIBRARIES})
 ELSE()
-target_link_libraries(indi_asi_wheel ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
+target_link_libraries(indi_asi_wheel ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${UDEV_LIBRARIES})
 ENDIF()
 
 ########### indi_asi_st4 ###########
 add_executable(indi_asi_st4 ${CMAKE_CURRENT_SOURCE_DIR}/asi_st4.cpp)
 IF (APPLE)
 set(CMAKE_EXE_LINKER_FLAGS "-framework IOKit -framework CoreFoundation")
-target_link_libraries(indi_asi_st4 ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES})
+target_link_libraries(indi_asi_st4 ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES} ${UDEV_LIBRARIES})
 ELSE()
-target_link_libraries(indi_asi_st4 ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
+target_link_libraries(indi_asi_st4 ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${UDEV_LIBRARIES})
 ENDIF()
 
 ########### indi_asi_focuser ###########
 add_executable(indi_asi_focuser ${CMAKE_CURRENT_SOURCE_DIR}/asi_focuser.cpp)
 IF (APPLE)
 set(CMAKE_EXE_LINKER_FLAGS "-framework IOKit -framework CoreFoundation")
-target_link_libraries(indi_asi_focuser ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES})
+target_link_libraries(indi_asi_focuser ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES} ${UDEV_LIBRARIES})
 ELSE()
-target_link_libraries(indi_asi_focuser ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
+target_link_libraries(indi_asi_focuser ${INDI_LIBRARIES} ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${UDEV_LIBRARIES})
 ENDIF()
 
 ########### asi_camera_test ###########
 add_executable(asi_camera_test ${CMAKE_CURRENT_SOURCE_DIR}/asi_camera_test.cpp)
 IF (APPLE)
 set(CMAKE_EXE_LINKER_FLAGS "-framework IOKit -framework CoreFoundation")
-target_link_libraries(asi_camera_test ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES})
+target_link_libraries(asi_camera_test ${ASI_LIBRARIES} ${LIBUSB_LIBRARIES} ${UDEV_LIBRARIES})
 ELSE()
-target_link_libraries(asi_camera_test ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
+target_link_libraries(asi_camera_test ${ASI_LIBRARIES} ${USB1_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${UDEV_LIBRARIES})
 ENDIF()
 
 #####################################
